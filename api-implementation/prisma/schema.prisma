generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(cuid())
  email          String         @unique
  name           String
  password       String
  tier           String         @default("FREE")
  emailVerified  Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  planSelectedAt DateTime?
  usageCount     Int            @default(0)
  usageResetDate DateTime?
  soilAnalyses   SoilAnalysis[]
  subscription   Subscription?
  usageRecords   UsageRecord[]

  // Enhanced features
  comparativeAnalyses ComparativeAnalysis[]

  // DSS features
  dssCalculations     DSSCalculation[]

  // Salt management features
  leachingCalculations LeachingCalculation[]
  drainageAssessments  DrainageAssessment[]
  saltBalanceRecords   SaltBalanceRecord[]

  @@map("users")
}

model Subscription {
  id                   String   @id @default(cuid())
  userId               String   @unique
  tier                 String
  status               String   @default("ACTIVE")
  stripeCustomerId     String?
  stripeSubscriptionId String?
  stripePriceId        String?
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model UsageRecord {
  id          String   @id @default(cuid())
  userId      String?
  endpoint    String
  ipAddress   String?
  userAgent   String?
  requestData String?
  timestamp   DateTime @default(now())
  user        User?    @relation(fields: [userId], references: [id])

  @@map("usage_records")
}

model SoilAnalysis {
  id                    String   @id @default(cuid())
  userId                String?
  sand                  Float
  clay                  Float
  silt                  Float
  organicMatter         Float    @default(2.5)
  densityFactor         Float    @default(1.0)
  fieldCapacity         Float
  wiltingPoint          Float
  plantAvailableWater   Float
  saturation            Float
  saturatedConductivity Float
  textureClass          String
  calculationSource     String
  ipAddress             String?
  createdAt             DateTime @default(now())
  user                  User?    @relation(fields: [userId], references: [id])

  // Enhanced features relationship
  enhancedAnalysis     EnhancedSoilAnalysis?

  // DSS features relationship
  dssCalculations      DSSCalculation[]

  // Salt management relationships
  leachingCalculations LeachingCalculation[]
  drainageAssessments  DrainageAssessment[]
  saltBalanceRecords   SaltBalanceRecord[]

  @@index([userId, createdAt])
  @@index([createdAt])
  @@map("soil_analyses")
}

// NEW ENHANCED MODELS FOR ADVANCED FEATURES

// Regional soil characteristics database
model SoilRegion {
  id          String @id @default(cuid())
  
  // Geographic information
  regionName  String @unique // "US Midwest", "Mediterranean Basin", etc.
  country     String
  state       String?
  climateZone String // "Humid Continental", "Mediterranean", etc.
  
  // Regional environmental factors
  avgAnnualRainfall    Float  // mm
  avgAnnualTemperature Float  // °C
  frostFreeDays        Int?   // days per year
  
  // Typical soil characteristics for region
  typicalSandRange     String // "15-25%"
  typicalClayRange     String // "20-35%"
  typicalOMRange       String // "2-4%"
  
  // Regional adjustment factors (JSON stored as text)
  seasonalFactors      String? // JSON: seasonal adjustments
  climateAdjustments   String? // JSON: climate-based corrections
  
  // Administrative
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relationships
  enhancedAnalyses EnhancedSoilAnalysis[]
  
  @@map("soil_regions")
  @@index([country, state])
  @@index([climateZone])
}

// Enhanced soil analysis with regional data and visualization support
model EnhancedSoilAnalysis {
  id            String @id @default(cuid())
  
  // Link to base analysis
  baseAnalysisId String @unique
  baseAnalysis   SoilAnalysis @relation(fields: [baseAnalysisId], references: [id], onDelete: Cascade)
  
  // Regional context
  regionId      String?
  region        SoilRegion? @relation(fields: [regionId], references: [id], onDelete: SetNull)
  
  // Geographic location
  latitude      Float?
  longitude     Float?
  elevation     Float?  // meters above sea level
  siteDescription String? // "Field A, North Section"
  
  // Advanced soil parameters
  bulkDensity           Float?  // g/cm³
  particleDensity       Float?  // g/cm³
  totalPorosity         Float?  // %
  macroporosity         Float?  // %
  microporosity         Float?  // %
  
  // Chemical properties
  pH                    Float?
  electricalConductivity Float? // dS/m
  cationExchangeCapacity Float? // cmol/kg
  baseSaturation        Float?  // %
  
  // Physical properties  
  gravelContent         Float?  // %
  aggregateStability    Float?  // %
  infiltrationRate      Float?  // mm/hr
  
  // Calculated advanced results (stored as JSON text for flexibility)
  moistureTensionCurve  String? // JSON: tension-moisture data points
  profileData3D         String? // JSON: 3D soil profile visualization data
  seasonalVariation     String? // JSON: seasonal adjustment factors
  soilHorizons          String? // JSON: horizon data for 3D profile
  waterMovementModel    String? // JSON: water movement characteristics
  
  // Visualization metadata
  hasVisualizationData  Boolean @default(false)
  lastVisualizationCalc DateTime?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relationships
  moistureTensionPoints MoistureTensionPoint[]
  comparativeAnalyses   ComparativeAnalysis[]
  managementRecommendations SoilManagementRecommendation[]
  
  @@map("enhanced_soil_analyses")
  @@index([regionId])
  @@index([latitude, longitude])
}

// Individual moisture-tension curve data points
model MoistureTensionPoint {
  id                    String @id @default(cuid())
  
  enhancedAnalysisId    String
  enhancedAnalysis      EnhancedSoilAnalysis @relation(fields: [enhancedAnalysisId], references: [id], onDelete: Cascade)
  
  // Data point
  tension               Float  // kPa (tension/suction)
  moistureContent       Float  // % by volume
  
  // Metadata
  isCalculated          Boolean @default(true) // vs measured
  calculationMethod     String? // "Saxton-Rawls", "Van Genuchten", etc.
  
  @@map("moisture_tension_points")
  @@index([enhancedAnalysisId, tension])
}

// Comparative analysis support
model ComparativeAnalysis {
  id          String @id @default(cuid())
  
  // Analysis metadata
  name        String // "Field Comparison 2025"
  description String?
  analysisType String // "temporal", "spatial", "treatment"
  
  // User who created the comparison
  userId      String?
  user        User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // Analyses being compared (stored as JSON for flexibility)
  analysisIds String  // JSON array of analysis IDs
  
  // Comparison results
  comparisonResults String? // JSON: statistical comparison results
  visualizationData String? // JSON: data for comparative charts
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Many-to-many relationship with enhanced analyses
  enhancedAnalyses EnhancedSoilAnalysis[]
  
  @@map("comparative_analyses")
  @@index([userId, createdAt])
}

// Soil management recommendations based on enhanced analysis
model SoilManagementRecommendation {
  id                    String @id @default(cuid())
  
  enhancedAnalysisId    String
  enhancedAnalysis      EnhancedSoilAnalysis @relation(fields: [enhancedAnalysisId], references: [id], onDelete: Cascade)
  
  // Recommendation details
  category              String // "irrigation", "fertilization", "tillage", "drainage"
  priority              String // "high", "medium", "low"
  title                 String
  description           String
  
  // Implementation details
  seasonalTiming        String? // "spring", "fall", etc.
  expectedImprovement   String? // "20% increase in PAW"
  costEstimate          String? // "low", "medium", "high"
  
  // Supporting data
  scientificBasis       String? // Reference to research
  localRelevance        Float?  // 0-1 relevance score for region
  
  isActive              Boolean @default(true)
  createdAt             DateTime @default(now())
  
  @@map("soil_management_recommendations")
  @@index([enhancedAnalysisId, priority])
  @@index([category])
}

// ========================================
// DSS (DECISION SUPPORT SYSTEM) MODELS
// ========================================

// Crop database for irrigation calculations
model Crop {
  id                String @id @default(cuid())

  // Basic crop information
  name              String @unique // "Tomato", "Wheat", "Maize"
  scientificName    String? // "Solanum lycopersicum"
  type              String // "Cereal", "Vegetable", "Forage", "Field"
  category          String? // "C3", "C4" for photosynthesis type

  // Growth characteristics
  growthPeriodMin   Int // minimum days from sowing to harvest
  growthPeriodMax   Int // maximum days from sowing to harvest
  rootDepthMax      Float // maximum rooting depth in meters

  // Regional adaptations
  climateZones      String? // JSON array of suitable climate zones
  soilPreferences   String? // JSON object with soil preferences

  // Administrative
  isActive          Boolean @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  bbchStages        BBCHStage[]
  kcPeriods         KcPeriod[]
  dssCalculations   DSSCalculation[]

  // Salt management relationships
  saltToleranceThresholds SaltToleranceThreshold[]

  @@map("crops")
  @@index([type])
  @@index([name])
}

// BBCH growth stages for precise phenology tracking
model BBCHStage {
  id                String @id @default(cuid())

  // Crop relationship
  cropId            String
  crop              Crop @relation(fields: [cropId], references: [id], onDelete: Cascade)

  // BBCH stage information
  stageCode         String // "00", "10", "20", etc. (BBCH codes)
  stageName         String // "Germination", "Leaf development", etc.
  description       String? // Detailed description of the stage

  // Timing information
  typicalDaysFromSowing Int? // typical days from sowing to reach this stage
  durationDays      Int? // typical duration of this stage

  // Growth period classification
  growthPeriod      String? // "initial", "development", "mid", "late"

  @@map("bbch_stages")
  @@index([cropId, stageCode])
  @@index([growthPeriod])
}

// Crop coefficients (Kc) for different periods and conditions
model KcPeriod {
  id                String @id @default(cuid())

  // Crop relationship
  cropId            String
  crop              Crop @relation(fields: [cropId], references: [id], onDelete: Cascade)

  // Period information
  periodName        String // "Kc_ini", "Kc_dev", "Kc_mid", "Kc_end"
  periodStartDays   Int // days from sowing when period starts
  periodEndDays     Int // days from sowing when period ends

  // Kc values
  kcValue           Float // base Kc value from FAO-56
  kcMin             Float? // minimum Kc for the period
  kcMax             Float? // maximum Kc for the period

  // Environmental adjustments
  climateZone       String @default("temperate") // "arid", "humid", "temperate"
  irrigationMethod  String @default("sprinkler") // "drip", "sprinkler", "surface"

  // Quality and source information
  confidenceLevel   String @default("medium") // "high", "medium", "low"
  referenceSource   String? // "FAO-56", "Local research", etc.
  localCalibration  Boolean @default(false) // has been locally calibrated

  // Regional adjustments (JSON stored as text)
  climateAdjustments String? // JSON: climate-specific adjustments
  soilAdjustments   String? // JSON: soil-specific adjustments

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("kc_periods")
  @@index([cropId, periodName])
  @@index([climateZone, irrigationMethod])
}

// DSS calculation results and recommendations
model DSSCalculation {
  id                String @id @default(cuid())

  // User and analysis relationships
  userId            String?
  user              User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  soilAnalysisId    String
  soilAnalysis      SoilAnalysis @relation(fields: [soilAnalysisId], references: [id], onDelete: Cascade)
  cropId            String
  crop              Crop @relation(fields: [cropId], references: [id], onDelete: Cascade)

  // Field configuration
  fieldArea         Float // hectares
  fieldSlope        Float? // percentage
  fieldElevation    Float? // meters above sea level

  // Environmental inputs
  et0Value          Float? // reference evapotranspiration (mm/day)
  weatherSource     String? // "manual", "api", "flahacalc"
  climateZone       String? // for Kc adjustments

  // Calculated irrigation parameters
  etcCalculated     Float? // crop evapotranspiration (mm/day)
  irrigationDepth   Float? // recommended irrigation depth (mm)
  irrigationFrequency Int? // recommended frequency (days)
  maxApplicationRate Float? // maximum application rate (mm/hr)

  // System recommendations
  systemRecommendation String? // "drip", "sprinkler", "surface"
  systemEfficiency  Float? // estimated system efficiency (0-1)
  systemCost        Float? // estimated system cost

  // Economic analysis
  economicROI       Float? // return on investment (percentage)
  paybackPeriod     Float? // payback period (years)
  annualWaterSavings Float? // estimated annual water savings (m³)
  annualCostSavings Float? // estimated annual cost savings

  // Calculation metadata
  calculationMethod String @default("fao56") // "fao56", "enhanced", "ml"
  calculationVersion String @default("1.0") // version of calculation algorithm

  // Results storage (JSON for flexibility)
  detailedResults   String? // JSON: detailed calculation breakdown
  recommendations   String? // JSON: detailed recommendations
  scheduleData      String? // JSON: irrigation schedule

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("dss_calculations")
  @@index([userId, createdAt])
  @@index([soilAnalysisId])
  @@index([cropId])
}

// ========================================
// SALT MANAGEMENT & LEACHING/DRAINAGE MODELS
// ========================================

// Salt tolerance thresholds for crops (Gulf-specific)
model SaltToleranceThreshold {
  id                String @id @default(cuid())

  // Crop relationship
  cropId            String
  crop              Crop @relation(fields: [cropId], references: [id], onDelete: Cascade)

  // Standard FAO-29 values
  thresholdEC       Float // dS/m - EC causing no yield reduction
  slopePercent      Float // % yield loss per dS/m above threshold

  // Gulf-specific adjustments
  gulfAdjustedEC    Float? // Gulf climate adjusted threshold
  climateAdjustment Float @default(1.0) // adjustment factor for climate
  seasonalVariation String? // JSON: seasonal adjustment factors

  // Classification
  toleranceClass    String // "sensitive", "moderate", "tolerant", "highly_tolerant"
  gulfSuitability   String // "challenging", "moderate", "good", "very_good", "excellent"

  // Reference and validation
  referenceSource   String @default("FAO-29") // "FAO-29", "Regional Studies", etc.
  confidenceLevel   String @default("medium") // "high", "medium", "low"
  lastValidated     DateTime?

  // Administrative
  isActive          Boolean @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  leachingCalculations LeachingCalculation[]

  @@map("salt_tolerance_thresholds")
  @@index([cropId])
  @@index([toleranceClass])
  @@index([gulfSuitability])
}

// Leaching requirement calculations
model LeachingCalculation {
  id                String @id @default(cuid())

  // User and analysis relationships
  userId            String?
  user              User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  soilAnalysisId    String
  soilAnalysis      SoilAnalysis @relation(fields: [soilAnalysisId], references: [id], onDelete: Cascade)
  saltThresholdId   String?
  saltThreshold     SaltToleranceThreshold? @relation(fields: [saltThresholdId], references: [id], onDelete: SetNull)

  // Input parameters
  soilEC            Float // soil electrical conductivity (dS/m)
  waterEC           Float // irrigation water EC (dS/m)
  cropThresholdEC   Float // crop salt tolerance threshold (dS/m)
  climateZone       String @default("gcc_arid") // "gcc_arid", "mena_mediterranean", etc.

  // Environmental factors
  evaporationRate   Float? // mm/day
  temperature       Float? // °C
  humidity          Float? // %
  season            String? // "summer", "winter", "transition"

  // Calculated results
  leachingFraction  Float // calculated leaching fraction (0-1)
  leachingDepth     Float // leaching depth per irrigation (mm)
  totalWaterNeed    Float // irrigation + leaching water (mm)
  leachingFrequency String? // "every_irrigation", "every_3_irrigations", etc.

  // Gulf-specific adjustments
  climateFactor     Float @default(1.0) // climate adjustment factor
  seasonalFactor    Float @default(1.0) // seasonal adjustment factor
  adjustedLF        Float // final adjusted leaching fraction

  // Economic analysis
  extraWaterCost    Float? // additional water cost for leaching
  saltDamageRisk    Float? // economic risk of salt damage (0-1)
  recommendedAction String? // "immediate_leaching", "monitor", "crop_change"

  // Calculation metadata
  calculationMethod String @default("fao29_gulf") // "fao29", "fao29_gulf", "enhanced"
  calculationVersion String @default("1.0")

  // Results storage (JSON for flexibility)
  detailedResults   String? // JSON: detailed calculation breakdown
  recommendations   String? // JSON: specific recommendations

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  drainageAssessments DrainageAssessment[]

  @@map("leaching_calculations")
  @@index([userId, createdAt])
  @@index([soilAnalysisId])
  @@index([climateZone, season])
}

// Drainage system assessments and recommendations
model DrainageAssessment {
  id                String @id @default(cuid())

  // User and analysis relationships
  userId            String?
  user              User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  soilAnalysisId    String
  soilAnalysis      SoilAnalysis @relation(fields: [soilAnalysisId], references: [id], onDelete: Cascade)
  leachingCalcId    String?
  leachingCalculation LeachingCalculation? @relation(fields: [leachingCalcId], references: [id], onDelete: SetNull)

  // Field characteristics
  fieldArea         Float // hectares
  fieldSlope        Float? // percentage
  groundwaterDepth  Float? // meters below surface
  seasonalWaterTable Boolean @default(false) // seasonal water table present

  // Soil drainage properties
  drainageClass     String? // "well_drained", "moderately_drained", "poorly_drained"
  infiltrationRate  Float? // mm/hr
  permeability      String? // "high", "moderate", "low", "very_low"

  // Drainage requirements
  drainageRequired  Boolean @default(false)
  urgencyLevel      String? // "high", "medium", "low"
  drainageCapacity  Float? // required drainage capacity (mm/day)

  // System recommendations
  primarySystem     String? // "subsurface_tile", "surface", "mole", "combination"
  systemSpacing     String? // "15-30m", "50-100m", etc.
  systemDepth       String? // "1.2-1.5m", "0.8-1.0m", etc.
  materialType      String? // "perforated_pvc", "clay_tile", "gravel", etc.

  // Installation specifications
  installationCost  Float? // estimated cost in local currency
  maintenanceCost   Float? // annual maintenance cost
  expectedLifespan  Int? // years
  installationTime  String? // "2-4 weeks", "1-2 months", etc.

  // Economic analysis
  costBenefitRatio  Float? // benefit/cost ratio
  paybackPeriod     Float? // years
  yieldProtection   Float? // % yield protection expected

  // Assessment metadata
  assessmentMethod  String @default("standard") // "standard", "advanced", "expert"
  assessmentVersion String @default("1.0")

  // Results storage (JSON for flexibility)
  technicalSpecs    String? // JSON: detailed technical specifications
  installationPlan  String? // JSON: step-by-step installation plan
  maintenanceSchedule String? // JSON: maintenance schedule

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("drainage_assessments")
  @@index([userId, createdAt])
  @@index([soilAnalysisId])
  @@index([drainageRequired, urgencyLevel])
}

// Salt balance monitoring for fields
model SaltBalanceRecord {
  id                String @id @default(cuid())

  // User and field relationships
  userId            String?
  user              User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  soilAnalysisId    String
  soilAnalysis      SoilAnalysis @relation(fields: [soilAnalysisId], references: [id], onDelete: Cascade)

  // Monitoring period
  monitoringDate    DateTime
  season            String? // "spring", "summer", "fall", "winter"
  cropGrowthStage   String? // current crop growth stage

  // Salt inputs (kg/ha)
  irrigationSalt    Float @default(0) // salt from irrigation water
  fertilizerSalt    Float @default(0) // salt from fertilizers
  atmosphericSalt   Float @default(0) // salt from dust/atmospheric deposition
  groundwaterSalt   Float @default(0) // salt from groundwater intrusion

  // Salt outputs (kg/ha)
  leachingSalt      Float @default(0) // salt removed by leaching
  drainageSalt      Float @default(0) // salt removed by drainage
  cropUptakeSalt    Float @default(0) // salt uptake by crops
  surfaceRunoffSalt Float @default(0) // salt lost in surface runoff

  // Calculated balance
  totalSaltInput    Float // sum of all inputs
  totalSaltOutput   Float // sum of all outputs
  netSaltBalance    Float // input - output
  cumulativeBalance Float? // cumulative balance over time

  // Soil measurements
  currentSoilEC     Float? // measured soil EC (dS/m)
  soilSalinityTrend String? // "increasing", "stable", "decreasing"
  alertLevel        String? // "normal", "warning", "critical"

  // Recommendations
  actionRequired    Boolean @default(false)
  recommendedActions String? // JSON: array of recommended actions
  nextMonitoringDate DateTime?

  // Metadata
  dataSource        String @default("calculated") // "measured", "calculated", "estimated"
  qualityScore      Float? // data quality score (0-1)

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("salt_balance_records")
  @@index([userId, monitoringDate])
  @@index([soilAnalysisId, monitoringDate])
  @@index([alertLevel])
  @@index([season])
}

// Add relationships to existing models
// These will be added to the Crop model
// saltToleranceThresholds SaltToleranceThreshold[]

// These will be added to the SoilAnalysis model
// leachingCalculations LeachingCalculation[]
// drainageAssessments DrainageAssessment[]
// saltBalanceRecords SaltBalanceRecord[]

// These will be added to the User model
// leachingCalculations LeachingCalculation[]
// drainageAssessments DrainageAssessment[]
// saltBalanceRecords SaltBalanceRecord[]
